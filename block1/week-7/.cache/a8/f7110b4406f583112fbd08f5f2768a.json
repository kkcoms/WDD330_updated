{"id":"index.html","dependencies":[{"name":"./style.css","dynamic":true,"resolved":"/Users/Abundance/school-files/WDD_330/portfolio/block1/week-7/style.css","parent":"/Users/Abundance/school-files/WDD_330/portfolio/block1/week-7/index.html"},{"name":"./scripts.js","dynamic":true,"resolved":"/Users/Abundance/school-files/WDD_330/portfolio/block1/week-7/scripts.js","parent":"/Users/Abundance/school-files/WDD_330/portfolio/block1/week-7/index.html"}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Amy Baker WDD 330 | Week 5 </title>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <meta name=\"description\" content=\"WDD 330 Week Four Notes\">\n    <link rel=\"stylesheet\" href=\"/da232d78aa810382f2dcdceae308ff8e.css\">\n  </head> \n    <header>\n        <h1>Week 5</h1>\n    </header>\n    <main>\n      <!-- Chapter 10 notes and code examples -->\n      <section>\n        <h2>Chapter 11 Further Functions</h2>\n        <div>\n          <ul>\n            <li>\n              <h3>Function properties and methods</h3>\n              <p>\"The fact that functions are first-class objects means they can have properties and methods themselves.\"</p>\n              <h4>Call and Apply Methods</h4>\n              <!-- Can't get this form to work\n                <form class = \"nameExample\">\n                <input type='text' id ='name' name='name' autofocus placeholder='Your Name' required>\n                <button id = \"submit\" type='submit'><p>Say Hello!</p></button>\n              </form>\n              <ul id=\"displayName\"></ul> -->\n              <ul id=\"displayName1\"></ul>\n              <ul id=\"displayName2\"></ul>\n            </li>\n            <li>\n              <h3>Immediately Invoked function expressions</h3>\n              <p>\"An Immediately Invoked Function Expression is an anonymous function that, as the name suggests, is invoked as soon as it's defined. This is done by placing parentheses at the end of the function definition. The function also has to be made into an expression, which is done by placing the whole declaration inside parentheses, like this:\"</p>\n              <p>(function(){</p>\n              <p>  const temp = 'World';</p>\n              <p>  console.log(`Hello ${temp}`);</p>\n              <p>  })();</p>\n              <p>These are good for code that you only need once</p>\n              <p>You can also use an IIFE to create a self contained block of code so that you can use variable with the same name and they won't interfere with each other. This can also be dome with ES6 by encasing the code in a block </p>\n            </li>\n            <li>\n              <h3>Self-defining functions</h3>\n              <p>\"The dynamic nature of JavaScript means that a function is able to not only call itself, but define itself, and even redefine itself. This is done by assigning an anonymous function to a variable that hasthe same name as the function.\"</p>\n            </li>\n            <li>\n              <h3>Recursive functions</h3>\n              <p>\"A recursive function is one that invokes itself until a certain condition is met. Itâ€™s a useful tool to use when iterative processes are involved.\"</p>\n            </li>\n            <li>\n              <h3>Callbacks</h3>\n              <p>\"functions that are passed to other functions as arguments and then invoked inside the function they are passed to.\"</p>\n              </li>\n            <li>\n              <h3>Promises</h3>\n              <p>\"Apromiserepresents the future result of an asynchronous operation. Promises don't do anything that can't already be achieved using callbacks, but they help simplify the process, and avoid the convoluted code that can result from using multiple callbacks.\"</p>\n            </li>\n            <li>\n              <h3>Functions that return functions</h3>\n              <p>FUnctions can also return a function</p>\n            </li>\n            <li>\n              <h3>Closures</h3>\n              <p>\"A closure is a reference to a variable that was created inside the scope of another function, but is then kept alive and used in another part of the program.\"</p>\n            </li>\n          </ul>\n          \n      </div>\n      <!-- Code Examples -->\n      <div>\n        <h3>Code Examples</h3>\n\n        <section class=\"dojo\">\n          <div class=\"quiz-body\">\n          \n            <h1>Quiz Ninja!</h1>\n            <div id=\"timer\">Time: <strong>20</strong></div>\n            <div id=\"score\">Score: <strong>0</strong></div>\n       \n          <div id=\"question\"></div>\n          <form id=\"response\">\n            <input name=\"answer\" type=\"text\">\n            <button type=\"submit\">Submit Answer</button>\n          </form>  <div id=\"result\"></div>\n          <div id=\"info\"></div>\n          <button id=\"start\">Click to Start</button>\n          </div>\n        </section>\n        \n      </div>\n      </section>\n\n    </main>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js\"></script>\n    <script src=\"/db8f629adc6c4c33f29613cfb71a6038.js\"></script>\n  \n</html>"},"sourceMaps":null,"error":null,"hash":"d2a54e78843df68bc8a68dda8262c207","cacheData":{}}