{"id":"index.html","dependencies":[{"name":"./style.css","dynamic":true,"resolved":"/Users/Abundance/school-files/WDD_330/portfolio/block2/week-2/style.css","parent":"/Users/Abundance/school-files/WDD_330/portfolio/block2/week-2/index.html"},{"name":"./scripts.js","dynamic":true,"resolved":"/Users/Abundance/school-files/WDD_330/portfolio/block2/week-2/scripts.js","parent":"/Users/Abundance/school-files/WDD_330/portfolio/block2/week-2/index.html"}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Amy Baker WDD 330 | Week 9 </title>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <meta name=\"description\" content=\"WDD 330 Week Nine Notes\">\n    <link rel=\"stylesheet\" href=\"/da232d78aa810382f2dcdceae308ff8e.css\">\n  </head> \n    <header>\n        <h1>Week 9</h1>\n    </header>\n    <main>\n      <!-- Chapter 9 notes and code examples -->\n      <section>\n        <h2>The Window Object</h2>\n        <ul>\n          <li>\n            <h3>The Browser Object Model</h3>\n            <p>The Browser Object Model (or BOM for short) is a collection of properties and methods that contain information about the browser and computer screen.</p>\n          </li>\n\n          <li>\n            <h3>Finding out browser information</h3>\n            <p>\"The window object has a number of properties and methods that provide information about the user’s browser\"</p>\n          </li>\n          \n          <li>\n            <h3>Browser history</h3>\n            <p>\"The window.history property can be used to access information about any previously visited pages in the current browser session.\"</p>\n          </li>\n          \n          <li>\n            <h3>Controlling windows</h3>\n            <p>\"A new window can be opened using the window.open() method. This takes the URL of the page to be opened as its first parameter, the window title as its second parameter, and a list of attributes as the third parameter. This can also be assigned to a variable, so the window can then be referenced later in the code.\"</p>\n          </li>\n          \n          <li>\n            <h3>Cookies</h3>\n            <p>\"Cookies are small files that are saved locally on a user’s computer. They were invented by Netscape as a way of getting round HTTP being a stateless protocol. This means that a browser does not remember anything from one request to another. So every time a user visits a page, nothing about any previous visits is remembered. Cookies can be used to sidestep this problem by storing information that can then be retrieved between requests.\"</p>\n          </li>\n          \n          <li>\n            <h3>Timing functions</h3>\n            <p>\"The window object provides some useful methods for scheduling the execution of a function, and for repeatedly executing functions at regular intervals.\"</p>\n            <div id=\"square\" class=\"\">\n              <h4>Animation</h4>\n              <p>\"The setTimeOut() and setInterval() methods can be used to animate elements on a web page.\"</p>\n            </div>\n            <div id=\"square1\" onclick=\"setInterval1(rotate)\">\n              <h4>Animation</h4>\n              <p>\"The setTimeOut() and setInterval() methods can be used to animate elements on a web page.\"</p>\n            </div>\n          </li>\n        </ul>\n      </section>\n      <!-- End Chapter 9 -->\n\n      <section>\n        <h2>HTML5 APIs</h2>\n        <ul>\n          <li>\n            <h3>The development of HTML5 and the JavaScript APIs</h3>\n            <p></p>\n          </li>\n\n          <li>\n            <h3>The data- attribute</h3>\n            <p>\"The data- attribute is a way of embedding data in a web page using custom attributes that are ignored by the browser. They’re also private to a page, so are not intended to be used by an external service – their sole purpose is to be used by a JavaScript program. This means they’re perfect for adding data that can be used as a hook that the program utilizes to access information about a particular element on the page.\"</p>\n          </li>\n\n          <li>\n            <h3>HTML5 APIs</h3>\n            <p>The HTML5 specification contains a number of APIs that help to gain access to hardware, such as cameras, batteries, geolocation, and the graphics card. Hardware evolves quickly, and APIs are frequently introduced to give developers access, and control new features that appear in the latest devices.</p>\n            <ul>\n              <li>\n                <h4>local storage</h4>\n                <p>\"The Web Storage API provides a key-value store on the client’s computer that is similar to using cookies but has fewer restrictions, more storage capacity, and is generally easier to use. This makes it perfect for storing information about users, as well as storing application-specific information that can then be used during future sessions.\"</p>\n                <p>The fact that only strings can be saved might seem like a restriction at first, but by using JSON, we can store any JavaScript object in local storage.</p>\n                <p>localStorage.setItem('superman', JSON.stringify(hero);</p>\n                <p>superman = JSON.parse(localStorage.getItem('superman'));</p>\n                <p>Link to more information about local storage: https://www.sitepoint.com/an-overview-of-the-web-storage-api/</p>\n              </li>\n\n              <li>\n                <h4>geolocation</h4>\n                <p>\"The Geolocation API is used to obtain the geographical position of the device. This means it can be used to find the user’s exact location, then link to nearby places or measure the speed at which the user is moving. This information can then be used to filter data based on the user's location or speed and direction of travel.\"</p>\n                <p>\"The position object passed to the youAreHere() function has a coords property with a latitude and longitude property, which together give the coordinates of the device. These coordinates can then be used in conjunction with other applications or web services (such as a mapping service) to obtain the user’s exact location\"</p>\n                <p>function youAreHere(position) {</p>\n                <p>console.log(`Latitude: ${position.coords.latitude}, Longitude: ${position.coords.longitude}`); }</p>\n              </li>\n              <li>\n                <h4>web workers</h4>\n                <p>\"We saw in earlier chapters that JavaScript is a single-threaded language, meaning that only one process can run at one time. Web workers allow processes to be run in the background, adding support for concurrency in JavaScript.\"</p>\n                <p>Use the worker constructor function to create a new woker</p>\n                <p>const worker = new Worker('task.js');</p>\n                <p>\"This function takes the name of another JavaScript file as an argument. In the example, this is a file called 'task.js'. If this file exists, it will be downloaded asynchronously. The worker will only start once the file has finished downloading completely. If the file doesn’t exist, an error is thrown.\"</p>\n              </li>\n              <li>\n                <h4>multimedia</h4>\n                <p>\"Before HTML5, it was notoriously difficult to display audio and video in browsers, and plugins such as Flash often had to be used. HTML5 introduced the audio and video tags used to insert audio and video clips into a web page. It also introduced a Media API for controlling the playback of the clips using JavaScript.\"</p>\n                <p>\"An audio clip can be inserted into a page with the audio tag, using the src attribute to point to the audio file:\"</p>\n                  <!-- Audio Example: \n                    <audio src='/song.mp3' controls>\n                    Your browser does not support the audio element.\n                    </audio> -->\n                <p>\"A video clip can be inserted with the video tag, using the src attribute to point to the movie file:\"</p>\n                  <!-- Video Example:\n                  <video src='http://movie.mp4' controls>\n                    Your browser does not support the video element.\n                </video> -->\n              </li>\n            </ul>\n          </li>\n\n          <li>\n            <h3>Drawing shapes with canvas</h3>\n            <p>\"The canvas element was introduced to allow graphics to be drawn onto a web page in real time using JavaScript. A canvas element is a rectangular element on the web page. It has a coordinate system that starts at (0,0) in the top-left corner. To add a canvas element to a page, the canvas tag is used specifying a height and width .\"</p>\n          </li>\n\n          <li>\n            <h3>Shims and polyfills</h3>\n            <p>\"HTML5 APIs progress at a rapid rate ― new APIs are constantly being introduced, and existing APIs often change. Modern browsers are very quick to update and implement many of the changes, but you can’t always guarantee that users will have the most up-to-date browser. This is where a shim or a polyfill comes in handy. These are libraries of code that allow you to use the APIs as usual. They then fill in the necessary code that's not provided natively by the user’s browser.\"</p>\n          </li>\n\n        </ul>\n\n      </section>\n      <!-- Quiz Ninja for both chapters -->\n      <section>\n        <section class=\"dojo\">\n          <div class=\"quiz-body\">\n            <div>\n              <div id=\"timer\">Time: <strong>20</strong></div>\n              <div id=\"score\">Score: <strong>0</strong></div>\n              <div id=\"hiScore\">High Score: <strong></strong></div>\n              <h1>Quiz Ninja!</h1>\n            </div>\n          <div id=\"question\"></div>\n          <div id=\"response\"></div>\n          <div id=\"result\"></div>\n          <div id=\"info\"></div>\n          <button id=\"start\">Click to Start</button>\n          </div>\n        </section>\n      </section>\n\n    </main>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js\"></script>\n    <script src=\"/db8f629adc6c4c33f29613cfb71a6038.js\"></script>\n  \n</html>"},"sourceMaps":null,"error":null,"hash":"6379ca50e6a85d6575e80c49b8c28daf","cacheData":{}}